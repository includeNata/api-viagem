package com.api.apiviagem.service;

import com.api.apiviagem.model.User;
import com.api.apiviagem.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;

@Service // üëà Anota√ß√£o crucial para que o Spring reconhe√ßa esta classe como um Bean
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    /**
     * Este m√©todo √© chamado pelo Spring Security quando ele precisa carregar
     * os dados de um usu√°rio para realizar a autentica√ß√£o.
     * @param username O nome de usu√°rio (no nosso caso, o email) que est√° tentando se autenticar.
     * @return um objeto UserDetails contendo as informa√ß√µes do usu√°rio.
     * @throws UsernameNotFoundException se o usu√°rio n√£o for encontrado no banco de dados.
     */
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // 1. Busca o usu√°rio no reposit√≥rio pelo email
        User user = userRepository.findByEmail(username)
                .orElseThrow(() ->
                        new UsernameNotFoundException("Usu√°rio n√£o encontrado com o email: " + username));

        // 2. Converte as roles (permiss√µes) do seu usu√°rio para o formato que o Spring Security entende
        //    (uma cole√ß√£o de GrantedAuthority).
        //    Estou assumindo que sua entidade User tem um m√©todo getRoles() que retorna um Set<Role>
        //    e que a entidade Role tem um m√©todo getName() que retorna a string da role (ex: "ROLE_ADM").
        Set<GrantedAuthority> authorities = user.getRoles()
                .stream()
                .map(role -> new SimpleGrantedAuthority(role.getName().name()))
                .collect(Collectors.toSet());

        String password = "";

        // 3. Retorna um objeto User do pr√≥prio Spring Security, que implementa UserDetails.
        //    Este objeto cont√©m o email, a senha (hash) e as permiss√µes do usu√°rio.
        return new org.springframework.security.core.userdetails.User(
                user.getEmail(),
                password, // O Spring Security precisa da senha para o fluxo padr√£o de login
                authorities
        );
    }
}
