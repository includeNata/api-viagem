package com.api.apiviagem;

import com.api.apiviagem.model.AuthProvider;
import com.api.apiviagem.model.RoleType;
import com.api.apiviagem.model.User;
import com.api.apiviagem.model.Role; // Supondo que voc칡 tenha uma entidade Role
import com.api.apiviagem.repository.UserRepository;
import com.api.apiviagem.repository.RoleRepository; // Supondo que voc칡 tenha um reposit칩rio para Roles
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Set;

@Component
@Profile("dev") // 游녣 Importante! S칩 executa quando o perfil 'dev' est치 ativo.
public class AdminInitializer implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(AdminInitializer.class);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private RoleRepository roleRepository; // Necess치rio para buscar a role de ADM

    // Injeta os dados do admin a partir do application-dev.properties
    @Value("${admin.email}")
    private String adminEmail;

    @Value("${admin.name}")
    private String adminName;

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        logger.info("Verificando se o usu치rio administrador padr칚o existe...");

        // A l칩gica que voc칡 sugeriu: verificar se o admin j치 existe
        if (userRepository.findByEmail(adminEmail).isPresent()) {
            logger.info("Usu치rio administrador j치 existe. Nenhuma a칞칚o necess치ria.");
            return;
        }

        logger.info("Usu치rio administrador n칚o encontrado. Criando novo usu치rio admin...");
        RoleType roleType = RoleType.ADMIN;

        // Busca a role de admin ou cria se n칚o existir (opcional, mas robusto)
        Role adminRole = roleRepository.findByName(roleType)
                .orElseGet(() -> roleRepository.save(new Role(roleType, roleType.getDescription())));

        User adminUser = new User();
        adminUser.setEmail(adminEmail);
        // NUNCA armazene a senha em texto plano. Sempre use o encoder.
        adminUser.setName(adminName);
        adminUser.setRoles(Set.of(adminRole));
        adminUser.setAuthProvider(AuthProvider.LOCAL);

        userRepository.save(adminUser);

        logger.info("Usu치rio administrador criado com sucesso. Email: {}", adminEmail);
    }
}